ARM GAS  /tmp/ccGw0xGC.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.section	.rodata.str1.1,"aMS",%progbits,1
  13              	.LC0:
  14 0000 64656661 		.ascii	"defaultTask\000"
  14      756C7454 
  14      61736B00 
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.StartDefaultTask,"ax",%progbits
  19              		.align	1
  20              		.global	StartDefaultTask
  21              		.arch armv7-m
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  25              		.fpu softvfp
  27              	StartDefaultTask:
  28              	.LFB72:
  29              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2022 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "cmsis_os.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** 
  26:Core/Src/main.c **** /* USER CODE END Includes */
  27:Core/Src/main.c **** 
ARM GAS  /tmp/ccGw0xGC.s 			page 2


  28:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* USER CODE END PTD */
  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  34:Core/Src/main.c **** /* USER CODE BEGIN PD */
  35:Core/Src/main.c **** /* USER CODE END PD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  38:Core/Src/main.c **** /* USER CODE BEGIN PM */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* USER CODE END PM */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  43:Core/Src/main.c **** osThreadId defaultTaskHandle;
  44:Core/Src/main.c **** /* USER CODE BEGIN PV */
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* USER CODE END PV */
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  49:Core/Src/main.c **** void SystemClock_Config(void);
  50:Core/Src/main.c **** void StartDefaultTask(void const * argument);
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** /* USER CODE END PFP */
  55:Core/Src/main.c **** 
  56:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  57:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** /* USER CODE END 0 */
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** /**
  62:Core/Src/main.c ****   * @brief  The application entry point.
  63:Core/Src/main.c ****   * @retval int
  64:Core/Src/main.c ****   */
  65:Core/Src/main.c **** int main(void)
  66:Core/Src/main.c **** {
  67:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  68:Core/Src/main.c **** 
  69:Core/Src/main.c ****   /* USER CODE END 1 */
  70:Core/Src/main.c **** 
  71:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  72:Core/Src/main.c **** 
  73:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  74:Core/Src/main.c ****   HAL_Init();
  75:Core/Src/main.c **** 
  76:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  77:Core/Src/main.c **** 
  78:Core/Src/main.c ****   /* USER CODE END Init */
  79:Core/Src/main.c **** 
  80:Core/Src/main.c ****   /* Configure the system clock */
  81:Core/Src/main.c ****   SystemClock_Config();
  82:Core/Src/main.c **** 
  83:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
  84:Core/Src/main.c **** 
ARM GAS  /tmp/ccGw0xGC.s 			page 3


  85:Core/Src/main.c ****   /* USER CODE END SysInit */
  86:Core/Src/main.c **** 
  87:Core/Src/main.c ****   /* Initialize all configured peripherals */
  88:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
  89:Core/Src/main.c **** 
  90:Core/Src/main.c ****   /* USER CODE END 2 */
  91:Core/Src/main.c **** 
  92:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_MUTEX */
  93:Core/Src/main.c ****   /* add mutexes, ... */
  94:Core/Src/main.c ****   /* USER CODE END RTOS_MUTEX */
  95:Core/Src/main.c **** 
  96:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
  97:Core/Src/main.c ****   /* add semaphores, ... */
  98:Core/Src/main.c ****   /* USER CODE END RTOS_SEMAPHORES */
  99:Core/Src/main.c **** 
 100:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_TIMERS */
 101:Core/Src/main.c ****   /* start timers, add new ones, ... */
 102:Core/Src/main.c ****   /* USER CODE END RTOS_TIMERS */
 103:Core/Src/main.c **** 
 104:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 105:Core/Src/main.c ****   /* add queues, ... */
 106:Core/Src/main.c ****   /* USER CODE END RTOS_QUEUES */
 107:Core/Src/main.c **** 
 108:Core/Src/main.c ****   /* Create the thread(s) */
 109:Core/Src/main.c ****   /* definition and creation of defaultTask */
 110:Core/Src/main.c ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 111:Core/Src/main.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 112:Core/Src/main.c **** 
 113:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_THREADS */
 114:Core/Src/main.c ****   /* add threads, ... */
 115:Core/Src/main.c ****   /* USER CODE END RTOS_THREADS */
 116:Core/Src/main.c **** 
 117:Core/Src/main.c ****   /* Start scheduler */
 118:Core/Src/main.c ****   osKernelStart();
 119:Core/Src/main.c **** 
 120:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler */
 121:Core/Src/main.c ****   /* Infinite loop */
 122:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 123:Core/Src/main.c ****   while (1)
 124:Core/Src/main.c ****   {
 125:Core/Src/main.c ****     /* USER CODE END WHILE */
 126:Core/Src/main.c **** 
 127:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 128:Core/Src/main.c ****   }
 129:Core/Src/main.c ****   /* USER CODE END 3 */
 130:Core/Src/main.c **** }
 131:Core/Src/main.c **** 
 132:Core/Src/main.c **** /**
 133:Core/Src/main.c ****   * @brief System Clock Configuration
 134:Core/Src/main.c ****   * @retval None
 135:Core/Src/main.c ****   */
 136:Core/Src/main.c **** void SystemClock_Config(void)
 137:Core/Src/main.c **** {
 138:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 139:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 140:Core/Src/main.c **** 
 141:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
ARM GAS  /tmp/ccGw0xGC.s 			page 4


 142:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 143:Core/Src/main.c ****   */
 144:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 145:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 146:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 147:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 148:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 149:Core/Src/main.c ****   {
 150:Core/Src/main.c ****     Error_Handler();
 151:Core/Src/main.c ****   }
 152:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 153:Core/Src/main.c ****   */
 154:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 155:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 156:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 157:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 158:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 159:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 160:Core/Src/main.c **** 
 161:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 162:Core/Src/main.c ****   {
 163:Core/Src/main.c ****     Error_Handler();
 164:Core/Src/main.c ****   }
 165:Core/Src/main.c **** }
 166:Core/Src/main.c **** 
 167:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 168:Core/Src/main.c **** 
 169:Core/Src/main.c **** /* USER CODE END 4 */
 170:Core/Src/main.c **** 
 171:Core/Src/main.c **** /* USER CODE BEGIN Header_StartDefaultTask */
 172:Core/Src/main.c **** /**
 173:Core/Src/main.c ****   * @brief  Function implementing the defaultTask thread.
 174:Core/Src/main.c ****   * @param  argument: Not used
 175:Core/Src/main.c ****   * @retval None
 176:Core/Src/main.c ****   */
 177:Core/Src/main.c **** /* USER CODE END Header_StartDefaultTask */
 178:Core/Src/main.c **** void StartDefaultTask(void const * argument)
 179:Core/Src/main.c **** {
  30              		.loc 1 179 1 view -0
  31              		.cfi_startproc
  32              		@ Volatile: function does not return.
  33              		@ args = 0, pretend = 0, frame = 0
  34              		@ frame_needed = 0, uses_anonymous_args = 0
  35              	.LVL0:
  36              		.loc 1 179 1 is_stmt 0 view .LVU1
  37 0000 08B5     		push	{r3, lr}
  38              	.LCFI0:
  39              		.cfi_def_cfa_offset 8
  40              		.cfi_offset 3, -8
  41              		.cfi_offset 14, -4
  42              	.LVL1:
  43              	.L2:
 180:Core/Src/main.c ****   /* USER CODE BEGIN 5 */
 181:Core/Src/main.c ****   /* Infinite loop */
 182:Core/Src/main.c ****   for(;;)
  44              		.loc 1 182 3 is_stmt 1 discriminator 1 view .LVU2
 183:Core/Src/main.c ****   {
ARM GAS  /tmp/ccGw0xGC.s 			page 5


 184:Core/Src/main.c ****     osDelay(1);
  45              		.loc 1 184 5 discriminator 1 view .LVU3
  46 0002 0120     		movs	r0, #1
  47 0004 FFF7FEFF 		bl	osDelay
  48              	.LVL2:
 182:Core/Src/main.c ****   {
  49              		.loc 1 182 8 discriminator 1 view .LVU4
  50 0008 FBE7     		b	.L2
  51              		.cfi_endproc
  52              	.LFE72:
  54              		.section	.text.SystemClock_Config,"ax",%progbits
  55              		.align	1
  56              		.global	SystemClock_Config
  57              		.syntax unified
  58              		.thumb
  59              		.thumb_func
  60              		.fpu softvfp
  62              	SystemClock_Config:
  63              	.LFB71:
 137:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  64              		.loc 1 137 1 view -0
  65              		.cfi_startproc
  66              		@ args = 0, pretend = 0, frame = 64
  67              		@ frame_needed = 0, uses_anonymous_args = 0
 138:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  68              		.loc 1 138 3 view .LVU6
 137:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  69              		.loc 1 137 1 is_stmt 0 view .LVU7
  70 0000 00B5     		push	{lr}
  71              	.LCFI1:
  72              		.cfi_def_cfa_offset 4
  73              		.cfi_offset 14, -4
  74 0002 91B0     		sub	sp, sp, #68
  75              	.LCFI2:
  76              		.cfi_def_cfa_offset 72
 138:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  77              		.loc 1 138 22 view .LVU8
  78 0004 2422     		movs	r2, #36
  79 0006 0021     		movs	r1, #0
  80 0008 07A8     		add	r0, sp, #28
  81 000a FFF7FEFF 		bl	memset
  82              	.LVL3:
 139:Core/Src/main.c **** 
  83              		.loc 1 139 3 is_stmt 1 view .LVU9
 139:Core/Src/main.c **** 
  84              		.loc 1 139 22 is_stmt 0 view .LVU10
  85 000e 1422     		movs	r2, #20
  86 0010 0021     		movs	r1, #0
  87 0012 01A8     		add	r0, sp, #4
  88 0014 FFF7FEFF 		bl	memset
  89              	.LVL4:
 144:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  90              		.loc 1 144 3 is_stmt 1 view .LVU11
 144:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  91              		.loc 1 144 36 is_stmt 0 view .LVU12
  92 0018 0223     		movs	r3, #2
 146:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
ARM GAS  /tmp/ccGw0xGC.s 			page 6


  93              		.loc 1 146 41 view .LVU13
  94 001a 0121     		movs	r1, #1
 144:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  95              		.loc 1 144 36 view .LVU14
  96 001c 0693     		str	r3, [sp, #24]
 145:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  97              		.loc 1 145 3 is_stmt 1 view .LVU15
 146:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  98              		.loc 1 146 41 is_stmt 0 view .LVU16
  99 001e 1023     		movs	r3, #16
 148:Core/Src/main.c ****   {
 100              		.loc 1 148 7 view .LVU17
 101 0020 06A8     		add	r0, sp, #24
 146:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 102              		.loc 1 146 41 view .LVU18
 103 0022 CDE90A13 		strd	r1, r3, [sp, #40]
 147:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 104              		.loc 1 147 3 is_stmt 1 view .LVU19
 148:Core/Src/main.c ****   {
 105              		.loc 1 148 3 view .LVU20
 148:Core/Src/main.c ****   {
 106              		.loc 1 148 7 is_stmt 0 view .LVU21
 107 0026 FFF7FEFF 		bl	HAL_RCC_OscConfig
 108              	.LVL5:
 148:Core/Src/main.c ****   {
 109              		.loc 1 148 6 view .LVU22
 110 002a 0146     		mov	r1, r0
 111 002c 08B1     		cbz	r0, .L4
 150:Core/Src/main.c ****   }
 112              		.loc 1 150 5 is_stmt 1 view .LVU23
 113              	.LBB12:
 114              	.LBI12:
 185:Core/Src/main.c ****   }
 186:Core/Src/main.c ****   /* USER CODE END 5 */
 187:Core/Src/main.c **** }
 188:Core/Src/main.c **** 
 189:Core/Src/main.c **** /**
 190:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 191:Core/Src/main.c ****   * @note   This function is called  when TIM1 interrupt took place, inside
 192:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 193:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 194:Core/Src/main.c ****   * @param  htim : TIM handle
 195:Core/Src/main.c ****   * @retval None
 196:Core/Src/main.c ****   */
 197:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 198:Core/Src/main.c **** {
 199:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 200:Core/Src/main.c **** 
 201:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 202:Core/Src/main.c ****   if (htim->Instance == TIM1) {
 203:Core/Src/main.c ****     HAL_IncTick();
 204:Core/Src/main.c ****   }
 205:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 206:Core/Src/main.c **** 
 207:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 208:Core/Src/main.c **** }
 209:Core/Src/main.c **** 
ARM GAS  /tmp/ccGw0xGC.s 			page 7


 210:Core/Src/main.c **** /**
 211:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 212:Core/Src/main.c ****   * @retval None
 213:Core/Src/main.c ****   */
 214:Core/Src/main.c **** void Error_Handler(void)
 115              		.loc 1 214 6 view .LVU24
 116              	.LBE12:
 215:Core/Src/main.c **** {
 216:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 217:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 218:Core/Src/main.c ****   __disable_irq();
 117              		.loc 1 218 3 view .LVU25
 118              	.LBB15:
 119              	.LBB13:
 120              	.LBI13:
 121              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
ARM GAS  /tmp/ccGw0xGC.s 			page 8


  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
ARM GAS  /tmp/ccGw0xGC.s 			page 9


  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 122              		.loc 2 140 27 view .LVU26
 123              	.LBB14:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 124              		.loc 2 142 3 view .LVU27
 125              		.syntax unified
 126              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 127 002e 72B6     		cpsid i
 128              	@ 0 "" 2
 129              		.thumb
 130              		.syntax unified
 131              	.L5:
 132              	.LBE14:
 133              	.LBE13:
 134              	.LBE15:
ARM GAS  /tmp/ccGw0xGC.s 			page 10


 219:Core/Src/main.c ****   while (1)
 135              		.loc 1 219 3 view .LVU28
 220:Core/Src/main.c ****   {
 221:Core/Src/main.c ****   }
 136              		.loc 1 221 3 view .LVU29
 219:Core/Src/main.c ****   while (1)
 137              		.loc 1 219 9 view .LVU30
 138 0030 FEE7     		b	.L5
 139              	.L4:
 154:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 140              		.loc 1 154 3 view .LVU31
 154:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 141              		.loc 1 154 31 is_stmt 0 view .LVU32
 142 0032 0F23     		movs	r3, #15
 158:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 143              		.loc 1 158 36 view .LVU33
 144 0034 CDE90300 		strd	r0, r0, [sp, #12]
 156:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 145              		.loc 1 156 34 view .LVU34
 146 0038 CDE90130 		strd	r3, r0, [sp, #4]
 157:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 147              		.loc 1 157 3 is_stmt 1 view .LVU35
 159:Core/Src/main.c **** 
 148              		.loc 1 159 3 view .LVU36
 159:Core/Src/main.c **** 
 149              		.loc 1 159 36 is_stmt 0 view .LVU37
 150 003c 0590     		str	r0, [sp, #20]
 161:Core/Src/main.c ****   {
 151              		.loc 1 161 3 is_stmt 1 view .LVU38
 161:Core/Src/main.c ****   {
 152              		.loc 1 161 7 is_stmt 0 view .LVU39
 153 003e 01A8     		add	r0, sp, #4
 154 0040 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 155              	.LVL6:
 161:Core/Src/main.c ****   {
 156              		.loc 1 161 6 view .LVU40
 157 0044 08B1     		cbz	r0, .L3
 163:Core/Src/main.c ****   }
 158              		.loc 1 163 5 is_stmt 1 view .LVU41
 159              	.LBB16:
 160              	.LBI16:
 214:Core/Src/main.c **** {
 161              		.loc 1 214 6 view .LVU42
 162              	.LBE16:
 218:Core/Src/main.c ****   while (1)
 163              		.loc 1 218 3 view .LVU43
 164              	.LBB19:
 165              	.LBB17:
 166              	.LBI17:
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 167              		.loc 2 140 27 view .LVU44
 168              	.LBB18:
 169              		.loc 2 142 3 view .LVU45
 170              		.syntax unified
 171              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 172 0046 72B6     		cpsid i
 173              	@ 0 "" 2
ARM GAS  /tmp/ccGw0xGC.s 			page 11


 174              		.thumb
 175              		.syntax unified
 176              	.L7:
 177              	.LBE18:
 178              	.LBE17:
 179              	.LBE19:
 219:Core/Src/main.c ****   {
 180              		.loc 1 219 3 view .LVU46
 181              		.loc 1 221 3 view .LVU47
 219:Core/Src/main.c ****   {
 182              		.loc 1 219 9 view .LVU48
 183 0048 FEE7     		b	.L7
 184              	.L3:
 165:Core/Src/main.c **** 
 185              		.loc 1 165 1 is_stmt 0 view .LVU49
 186 004a 11B0     		add	sp, sp, #68
 187              	.LCFI3:
 188              		.cfi_def_cfa_offset 4
 189              		@ sp needed
 190 004c 5DF804FB 		ldr	pc, [sp], #4
 191              		.cfi_endproc
 192              	.LFE71:
 194              		.section	.text.startup.main,"ax",%progbits
 195              		.align	1
 196              		.global	main
 197              		.syntax unified
 198              		.thumb
 199              		.thumb_func
 200              		.fpu softvfp
 202              	main:
 203              	.LFB70:
  66:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 204              		.loc 1 66 1 is_stmt 1 view -0
 205              		.cfi_startproc
 206              		@ Volatile: function does not return.
 207              		@ args = 0, pretend = 0, frame = 32
 208              		@ frame_needed = 0, uses_anonymous_args = 0
  74:Core/Src/main.c **** 
 209              		.loc 1 74 3 view .LVU51
  66:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 210              		.loc 1 66 1 is_stmt 0 view .LVU52
 211 0000 00B5     		push	{lr}
 212              	.LCFI4:
 213              		.cfi_def_cfa_offset 4
 214              		.cfi_offset 14, -4
 110:Core/Src/main.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 215              		.loc 1 110 3 view .LVU53
 216 0002 0B4D     		ldr	r5, .L10
  66:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 217              		.loc 1 66 1 view .LVU54
 218 0004 89B0     		sub	sp, sp, #36
 219              	.LCFI5:
 220              		.cfi_def_cfa_offset 40
 110:Core/Src/main.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 221              		.loc 1 110 3 view .LVU55
 222 0006 01AC     		add	r4, sp, #4
  74:Core/Src/main.c **** 
ARM GAS  /tmp/ccGw0xGC.s 			page 12


 223              		.loc 1 74 3 view .LVU56
 224 0008 FFF7FEFF 		bl	HAL_Init
 225              	.LVL7:
  81:Core/Src/main.c **** 
 226              		.loc 1 81 3 is_stmt 1 view .LVU57
 227 000c FFF7FEFF 		bl	SystemClock_Config
 228              	.LVL8:
 110:Core/Src/main.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 229              		.loc 1 110 3 view .LVU58
 230 0010 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 231 0012 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 232 0014 95E80700 		ldm	r5, {r0, r1, r2}
 233 0018 84E80700 		stm	r4, {r0, r1, r2}
 111:Core/Src/main.c **** 
 234              		.loc 1 111 3 view .LVU59
 111:Core/Src/main.c **** 
 235              		.loc 1 111 23 is_stmt 0 view .LVU60
 236 001c 0021     		movs	r1, #0
 237 001e 01A8     		add	r0, sp, #4
 238 0020 FFF7FEFF 		bl	osThreadCreate
 239              	.LVL9:
 111:Core/Src/main.c **** 
 240              		.loc 1 111 21 view .LVU61
 241 0024 034B     		ldr	r3, .L10+4
 242 0026 1860     		str	r0, [r3]
 118:Core/Src/main.c **** 
 243              		.loc 1 118 3 is_stmt 1 view .LVU62
 244 0028 FFF7FEFF 		bl	osKernelStart
 245              	.LVL10:
 246              	.L9:
 123:Core/Src/main.c ****   {
 247              		.loc 1 123 3 discriminator 1 view .LVU63
 128:Core/Src/main.c ****   /* USER CODE END 3 */
 248              		.loc 1 128 3 discriminator 1 view .LVU64
 123:Core/Src/main.c ****   {
 249              		.loc 1 123 9 discriminator 1 view .LVU65
 250 002c FEE7     		b	.L9
 251              	.L11:
 252 002e 00BF     		.align	2
 253              	.L10:
 254 0030 00000000 		.word	.LANCHOR0
 255 0034 00000000 		.word	defaultTaskHandle
 256              		.cfi_endproc
 257              	.LFE70:
 259              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 260              		.align	1
 261              		.global	HAL_TIM_PeriodElapsedCallback
 262              		.syntax unified
 263              		.thumb
 264              		.thumb_func
 265              		.fpu softvfp
 267              	HAL_TIM_PeriodElapsedCallback:
 268              	.LVL11:
 269              	.LFB73:
 198:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 270              		.loc 1 198 1 view -0
 271              		.cfi_startproc
ARM GAS  /tmp/ccGw0xGC.s 			page 13


 272              		@ args = 0, pretend = 0, frame = 0
 273              		@ frame_needed = 0, uses_anonymous_args = 0
 274              		@ link register save eliminated.
 202:Core/Src/main.c ****     HAL_IncTick();
 275              		.loc 1 202 3 view .LVU67
 202:Core/Src/main.c ****     HAL_IncTick();
 276              		.loc 1 202 6 is_stmt 0 view .LVU68
 277 0000 0268     		ldr	r2, [r0]
 278 0002 034B     		ldr	r3, .L14
 279 0004 9A42     		cmp	r2, r3
 280 0006 01D1     		bne	.L12
 203:Core/Src/main.c ****   }
 281              		.loc 1 203 5 is_stmt 1 view .LVU69
 282 0008 FFF7FEBF 		b	HAL_IncTick
 283              	.LVL12:
 284              	.L12:
 208:Core/Src/main.c **** 
 285              		.loc 1 208 1 is_stmt 0 view .LVU70
 286 000c 7047     		bx	lr
 287              	.L15:
 288 000e 00BF     		.align	2
 289              	.L14:
 290 0010 002C0140 		.word	1073818624
 291              		.cfi_endproc
 292              	.LFE73:
 294              		.section	.text.Error_Handler,"ax",%progbits
 295              		.align	1
 296              		.global	Error_Handler
 297              		.syntax unified
 298              		.thumb
 299              		.thumb_func
 300              		.fpu softvfp
 302              	Error_Handler:
 303              	.LFB74:
 215:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 304              		.loc 1 215 1 is_stmt 1 view -0
 305              		.cfi_startproc
 306              		@ Volatile: function does not return.
 307              		@ args = 0, pretend = 0, frame = 0
 308              		@ frame_needed = 0, uses_anonymous_args = 0
 309              		@ link register save eliminated.
 218:Core/Src/main.c ****   while (1)
 310              		.loc 1 218 3 view .LVU72
 311              	.LBB20:
 312              	.LBI20:
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313              		.loc 2 140 27 view .LVU73
 314              	.LBB21:
 315              		.loc 2 142 3 view .LVU74
 316              		.syntax unified
 317              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 318 0000 72B6     		cpsid i
 319              	@ 0 "" 2
 320              		.thumb
 321              		.syntax unified
 322              	.L17:
 323              	.LBE21:
ARM GAS  /tmp/ccGw0xGC.s 			page 14


 324              	.LBE20:
 219:Core/Src/main.c ****   {
 325              		.loc 1 219 3 discriminator 1 view .LVU75
 326              		.loc 1 221 3 discriminator 1 view .LVU76
 219:Core/Src/main.c ****   {
 327              		.loc 1 219 9 discriminator 1 view .LVU77
 328 0002 FEE7     		b	.L17
 329              		.cfi_endproc
 330              	.LFE74:
 332              		.comm	defaultTaskHandle,4,4
 333              		.section	.rodata
 334              		.align	2
 335              		.set	.LANCHOR0,. + 0
 336              	.LC2:
 337 0000 00000000 		.word	.LC0
 338 0004 00000000 		.word	StartDefaultTask
 339 0008 0000     		.short	0
 340 000a 0000     		.space	2
 341 000c 00000000 		.word	0
 342 0010 80000000 		.word	128
 343 0014 00000000 		.word	0
 344 0018 00000000 		.word	0
 345              		.text
 346              	.Letext0:
 347              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 348              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 349              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 350              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 351              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 352              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 353              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 354              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 355              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 356              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 357              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h"
 358              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 359              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 360              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 361              		.file 17 "<built-in>"
ARM GAS  /tmp/ccGw0xGC.s 			page 15


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccGw0xGC.s:19     .text.StartDefaultTask:0000000000000000 $t
     /tmp/ccGw0xGC.s:27     .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/ccGw0xGC.s:55     .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccGw0xGC.s:62     .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccGw0xGC.s:195    .text.startup.main:0000000000000000 $t
     /tmp/ccGw0xGC.s:202    .text.startup.main:0000000000000000 main
     /tmp/ccGw0xGC.s:254    .text.startup.main:0000000000000030 $d
                            *COM*:0000000000000004 defaultTaskHandle
     /tmp/ccGw0xGC.s:260    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccGw0xGC.s:267    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccGw0xGC.s:290    .text.HAL_TIM_PeriodElapsedCallback:0000000000000010 $d
     /tmp/ccGw0xGC.s:295    .text.Error_Handler:0000000000000000 $t
     /tmp/ccGw0xGC.s:302    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccGw0xGC.s:334    .rodata:0000000000000000 $d

UNDEFINED SYMBOLS
osDelay
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
osThreadCreate
osKernelStart
HAL_IncTick
